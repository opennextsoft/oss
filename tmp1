#include <stdio.h>
#include <string.h>
#include <ctype.h>

int
CheckWildcard(const char* wildcard, const char* mailaddr)
{
    const char* p_mailaddr = NULL, *ptr_wildcard = NULL;

    if ((*wildcard == '\0') && (*mailaddr == '\0')) {
        return 1;
    }

    while ((*mailaddr) && (*wildcard != '*'))
    {
        if (tolower(*wildcard) != tolower(*mailaddr)) {
            return 0;
        }
        wildcard++;
        mailaddr++;
    }

printf("BL: [%c] [%c]\n", *wildcard, *mailaddr);
    while (*mailaddr)
    {
printf("[%c] [%c]\n", *wildcard, *mailaddr);
        if (*wildcard == '*')  {
            if (!*++wildcard) {
                return 1;
            }
            ptr_wildcard = wildcard;
            p_mailaddr = mailaddr + 1;
        } else if (tolower(*wildcard) == tolower(*mailaddr)) {
            wildcard++;
            mailaddr++;
        } else {
            wildcard = ptr_wildcard;
            mailaddr = p_mailaddr + 1;
        }
    }

    while (*wildcard == '*')
    {
printf("DEBUG:CONTINUE:wildcard=%s\n", wildcard);
        wildcard++;
    }

printf("DEBUG:wildcard=%s\n", wildcard);
    if (*wildcard == '\0') {
       return 1;
    } else {
       return 0;
    }
}

struct TestPTN {
    char wildcard[1024];
    char mailaddr[10240];
    int result;
};

int main()
{
    int NUM_PTN = 11;
    int i = 0;
    int ret;
    struct TestPTN tptn[NUM_PTN];

    sprintf(tptn[0].wildcard, "a*bc");
    sprintf(tptn[0].mailaddr, "aeebc");
    tptn[0].result = 1;

    i = 1;
    sprintf(tptn[i].wildcard, "a*bc");
    sprintf(tptn[i].mailaddr, "AeEBc");
    tptn[i].result = 1;

    i = 2;
    sprintf(tptn[i].wildcard, "abcd*abcd");
    sprintf(tptn[i].mailaddr, "abcdabcd");
    tptn[i].result = 1;

    i = 3;
    sprintf(tptn[i].wildcard, "*abcdabcd");
    sprintf(tptn[i].mailaddr, "abcdabcd");
    tptn[i].result = 1;

    i = 4;
    sprintf(tptn[i].wildcard, "abcdabcd");
    sprintf(tptn[i].mailaddr, "eabcdabcd");
    tptn[i].result = 0;

    i = 5;
    sprintf(tptn[i].wildcard, "abcdabc*");
    sprintf(tptn[i].mailaddr, "abcdabcd");
    tptn[i].result = 1;

    i = 6;
    sprintf(tptn[i].wildcard, "abcd*****efgh");
    sprintf(tptn[i].mailaddr, "abcdefgh");
    tptn[i].result = 1;

    i = 7;
    sprintf(tptn[i].wildcard, "abcd*****");
    sprintf(tptn[i].mailaddr, "abcdefgh");
    tptn[i].result = 1;

    i = 8;
    sprintf(tptn[i].wildcard, "****");
    sprintf(tptn[i].mailaddr, "abcdefgh");
    tptn[i].result = 1;

    i = 9;
    sprintf(tptn[i].wildcard, "abcd*def");
    sprintf(tptn[i].mailaddr, "abcdde");
    tptn[i].result = 0;

    i = 10;
    sprintf(tptn[i].wildcard, "abcd*de***");
    sprintf(tptn[i].mailaddr, "abcdde");
    tptn[i].result = 0;

    for (i = 0; i < NUM_PTN; i++) {
        printf("----------------\n");
        ret = CheckWildcard(tptn[i].wildcard, tptn[i].mailaddr);
        if (ret == tptn[i].result) {
            printf("testcase %d [%s][%s][%d] PASSED\n", i, tptn[i].wildcard, tptn[i].mailaddr, tptn[i].result);
        } else {
            printf("testcase %d [%s][%s][%d] FAILED\n", i, tptn[i].wildcard, tptn[i].mailaddr, tptn[i].result);
        }
    }

    return 0;
}
